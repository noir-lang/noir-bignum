export class FetchUrlError extends Error {
    code;
    status;
    url;
    constructor(message, code, status, url) {
        super(message);
        this.code = code;
        this.status = status;
        this.url = url;
        this.name = 'FetchUrlError';
    }
    static create(url, status, message) {
        if (status === 404)
            return new FetchUrlError(message || 'URL not found.', 'ENOENT', status, url);
        if (status >= 400 && status < 500)
            return new FetchUrlError(message || 'Permission denied.', 'EACCES', status, url);
        return new FetchUrlError(message || 'Fatal Error', 'ECONNREFUSED', status, url);
    }
    static fromError(url, e) {
        const cause = getCause(e);
        if (cause) {
            return new FetchUrlError(cause.message, cause.code, undefined, url);
        }
        if (isNodeError(e)) {
            return new FetchUrlError(e.message, e.code, undefined, url);
        }
        return new FetchUrlError(e.message, undefined, undefined, url);
    }
}
export function isNodeError(e) {
    if (e instanceof Error && 'code' in e && typeof e.code === 'string')
        return true;
    if (e && typeof e === 'object' && 'code' in e && typeof e.code === 'string')
        return true;
    return false;
}
export function isError(e) {
    return e instanceof Error;
}
export function isErrorWithOptionalCause(e) {
    return isError(e) && (!('cause' in e) || isNodeError(e.cause) || isNodeError(e));
}
export function getCause(e) {
    return isErrorWithOptionalCause(e) ? e.cause : undefined;
}
export function toFetchUrlError(err, url) {
    return err instanceof FetchUrlError ? err : FetchUrlError.fromError(url, toError(err));
}
export function toError(err) {
    return err instanceof Error ? err : new Error('Unknown Error', { cause: err });
}
//# sourceMappingURL=FetchError.js.map