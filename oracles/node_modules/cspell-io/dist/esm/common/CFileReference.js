import { toFileURL } from '../node/file/url.js';
export class CFileReference {
    url;
    encoding;
    baseFilename;
    /**
     * Use to ensure the nominal type separation between CFileReference and FileReference
     * See: https://github.com/microsoft/TypeScript/wiki/FAQ#when-and-why-are-classes-nominal
     */
    _;
    gz;
    constructor(url, encoding, baseFilename, gz) {
        this.url = url;
        this.encoding = encoding;
        this.baseFilename = baseFilename;
        this.gz = gz ?? (baseFilename?.endsWith('.gz') || undefined) ?? (url.pathname.endsWith('.gz') || undefined);
    }
    static isCFileReference(obj) {
        return obj instanceof CFileReference;
    }
    static from(fileReference, encoding, baseFilename, gz) {
        if (CFileReference.isCFileReference(fileReference))
            return fileReference;
        if (fileReference instanceof URL)
            return new CFileReference(fileReference, encoding, baseFilename, gz);
        return new CFileReference(fileReference.url, fileReference.encoding, fileReference.baseFilename, fileReference.gz);
    }
    toJson() {
        return {
            url: this.url.href,
            encoding: this.encoding,
            baseFilename: this.baseFilename,
            gz: this.gz,
        };
    }
}
/**
 *
 * @param file - a URL, file path, or FileReference
 * @param encoding - optional encoding used to decode the file.
 * @param baseFilename - optional base filename used with data URLs.
 * @param gz - optional flag to indicate if the file is gzipped.
 * @returns a FileReference
 */
export function toFileReference(file, encoding, baseFilename, gz) {
    const fileReference = typeof file === 'string' ? toFileURL(file) : file;
    if (fileReference instanceof URL)
        return new CFileReference(fileReference, encoding, baseFilename, gz);
    return CFileReference.from(fileReference);
}
export function isFileReference(ref) {
    return CFileReference.isCFileReference(ref) || (!(ref instanceof URL) && typeof ref !== 'string');
}
export function renameFileReference(ref, newUrl) {
    return new CFileReference(newUrl, ref.encoding, ref.baseFilename, ref.gz);
}
export function toFileResourceRequest(file, encoding, signal) {
    const fileReference = typeof file === 'string' ? toFileURL(file) : file;
    if (fileReference instanceof URL)
        return { url: fileReference, encoding, signal };
    return { url: fileReference.url, encoding: encoding ?? fileReference.encoding, signal };
}
//# sourceMappingURL=CFileReference.js.map