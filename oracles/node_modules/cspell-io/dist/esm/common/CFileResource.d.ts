import type { BufferEncoding } from '../models/BufferEncoding.js';
import type { FileReference, FileResource, TextFileResource } from '../models/FileResource.js';
export declare class CFileResource implements TextFileResource {
    readonly url: URL;
    readonly content: string | ArrayBufferView;
    readonly encoding: BufferEncoding | undefined;
    private _text?;
    readonly baseFilename?: string | undefined;
    private _gz?;
    constructor(url: URL, content: string | ArrayBufferView, encoding: BufferEncoding | undefined, baseFilename: string | undefined, gz: boolean | undefined);
    get gz(): boolean;
    getText(encoding?: BufferEncoding): string;
    getBytes(): Uint8Array;
    toJson(): {
        url: string;
        content: string;
        encoding: BufferEncoding | undefined;
        baseFilename: string | undefined;
        gz: boolean;
    };
    static isCFileResource(obj: unknown): obj is CFileResource;
    static from(fileResource: FileResource): CFileResource;
    static from(fileReference: FileReference, content: string | ArrayBufferView): CFileResource;
    static from(fileReference: FileReference | URL, content: string | ArrayBufferView): CFileResource;
    static from(url: URL, content: string | ArrayBufferView, encoding?: BufferEncoding | undefined, baseFilename?: string | undefined, gz?: boolean): CFileResource;
}
export declare function fromFileResource(fileResource: FileResource, encoding?: BufferEncoding): TextFileResource;
export declare function renameFileResource(fileResource: FileResource, url: URL): FileResource;
//# sourceMappingURL=CFileResource.d.ts.map