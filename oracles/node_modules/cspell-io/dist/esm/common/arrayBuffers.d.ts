/**
 * Treat a ArrayBufferView as a Uint8Array.
 * The Uint8Array will share the same underlying ArrayBuffer.
 * @param data - source data
 * @returns Uint8Array
 */
export declare function asUint8Array(data: ArrayBufferView): Uint8Array;
export declare function arrayBufferViewToBuffer(data: ArrayBufferView): Buffer;
/**
 * Copy the data buffer.
 * @param data - source data
 * @returns A copy of the data
 */
export declare function copyArrayBufferView(data: ArrayBufferView): ArrayBufferView;
/**
 * Slice an existing data view. Returns a new view using the same underlying data.
 * @param data - data view
 * @param byteOffset - offset from the beginning of the view.
 * @param byteLength - optional length
 */
export declare function sliceView(data: ArrayBufferView, byteOffset: number, byteLength?: number): ArrayBufferView;
/**
 * Swap the bytes in a buffer.
 * @param data - data to swap
 * @returns data
 */
declare function swap16Poly(data: ArrayBufferView): ArrayBufferView;
/**
 * Swap the bytes in a buffer.
 * @param data - data to swap
 * @returns data
 */
export declare function swap16(data: ArrayBufferView): ArrayBufferView;
export declare function swapBytes(data: ArrayBufferView): ArrayBufferView;
export declare const __debug__: {
    swap16Poly: typeof swap16Poly;
};
export {};
//# sourceMappingURL=arrayBuffers.d.ts.map