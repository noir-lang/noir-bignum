import { assert } from '../errors/assert.js';
import { decode, encodeString, isGZipped } from './encode-decode.js';
export class CFileResource {
    url;
    content;
    encoding;
    _text;
    baseFilename;
    _gz;
    constructor(url, content, encoding, baseFilename, gz) {
        this.url = url;
        this.content = content;
        this.encoding = encoding;
        this.baseFilename = baseFilename ?? ((url.protocol !== 'data:' && url.pathname.split('/').pop()) || undefined);
        this._gz = gz;
    }
    get gz() {
        if (this._gz !== undefined)
            return this._gz;
        if (this.url.pathname.endsWith('.gz'))
            return true;
        if (typeof this.content === 'string')
            return false;
        return isGZipped(this.content);
    }
    getText(encoding) {
        if (this._text !== undefined)
            return this._text;
        const text = typeof this.content === 'string' ? this.content : decode(this.content, encoding ?? this.encoding);
        this._text = text;
        return text;
    }
    getBytes() {
        const arrayBufferview = typeof this.content === 'string' ? encodeString(this.content, this.encoding) : this.content;
        return arrayBufferview instanceof Uint8Array
            ? arrayBufferview
            : new Uint8Array(arrayBufferview.buffer, arrayBufferview.byteOffset, arrayBufferview.byteLength);
    }
    toJson() {
        return {
            url: this.url.href,
            content: this.getText(),
            encoding: this.encoding,
            baseFilename: this.baseFilename,
            gz: this.gz,
        };
    }
    static isCFileResource(obj) {
        return obj instanceof CFileResource;
    }
    static from(urlOrFileResource, content, encoding, baseFilename, gz) {
        if (CFileResource.isCFileResource(urlOrFileResource)) {
            if (content) {
                const { url, encoding, baseFilename, gz } = urlOrFileResource;
                return new CFileResource(url, content, encoding, baseFilename, gz);
            }
            return urlOrFileResource;
        }
        if (urlOrFileResource instanceof URL) {
            assert(content !== undefined);
            return new CFileResource(urlOrFileResource, content, encoding, baseFilename, gz);
        }
        if (content !== undefined) {
            const fileRef = urlOrFileResource;
            return new CFileResource(fileRef.url, content, fileRef.encoding, fileRef.baseFilename, fileRef.gz);
        }
        assert('content' in urlOrFileResource && urlOrFileResource.content !== undefined);
        const fileResource = urlOrFileResource;
        return new CFileResource(fileResource.url, fileResource.content, fileResource.encoding, fileResource.baseFilename, fileResource.gz);
    }
}
export function fromFileResource(fileResource, encoding) {
    return CFileResource.from(encoding ? { ...fileResource, encoding } : fileResource);
}
export function renameFileResource(fileResource, url) {
    return CFileResource.from({ ...fileResource, url });
}
//# sourceMappingURL=CFileResource.js.map