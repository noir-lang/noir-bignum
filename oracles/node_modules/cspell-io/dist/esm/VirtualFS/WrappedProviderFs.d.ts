import type { CSpellIO } from '../CSpellIO.js';
import type { BufferEncoding, DirEntry, FileReference, FileResource, TextFileResource } from '../models/index.js';
import { FileType } from '../models/index.js';
import type { LogEvent } from '../models/LogEvent.js';
import { FileSystemProviderInfo, FSCapabilities, FSCapabilityFlags, ReadFileOptions, UrlOrReference, VFileSystemCore, VfsDirEntry, VfsStat } from '../VFileSystem.js';
import type { VFileSystemProvider, VProviderFileSystem } from '../VirtualFS.js';
export declare function cspellIOToFsProvider(cspellIO: CSpellIO): VFileSystemProvider;
export declare class VFSError extends Error {
    constructor(message: string, options?: {
        cause?: unknown;
    });
}
export declare class VFSErrorUnsupportedRequest extends VFSError {
    readonly request: string;
    readonly parameters?: unknown | undefined;
    readonly url?: string | undefined;
    constructor(request: string, url?: URL | string, parameters?: unknown | undefined);
}
export declare function fsCapabilities(flags: FSCapabilityFlags): FSCapabilities;
export declare class WrappedProviderFs implements VFileSystemCore {
    private readonly fs;
    readonly eventLogger: (event: LogEvent) => void;
    readonly hasProvider: boolean;
    readonly capabilities: FSCapabilityFlags;
    readonly providerInfo: FileSystemProviderInfo;
    private _capabilities;
    constructor(fs: VProviderFileSystem | undefined, eventLogger: (event: LogEvent) => void);
    private logEvent;
    getCapabilities(url: URL): FSCapabilities;
    stat(urlRef: UrlOrReference): Promise<VfsStat>;
    readFile(urlRef: UrlOrReference, optionsOrEncoding?: BufferEncoding | ReadFileOptions): Promise<TextFileResource>;
    readDirectory(url: URL): Promise<VfsDirEntry[]>;
    writeFile(file: FileResource): Promise<FileReference>;
    static disposeOf<V extends VFileSystemCore>(fs: V): void;
}
declare class CFileType {
    readonly fileType: FileType;
    constructor(fileType: FileType);
    isFile(): boolean;
    isDirectory(): boolean;
    isUnknown(): boolean;
    isSymbolicLink(): boolean;
}
export declare class CVfsDirEntry extends CFileType implements VfsDirEntry {
    private entry;
    private _url;
    constructor(entry: DirEntry);
    get name(): string;
    get dir(): URL;
    get url(): URL;
    toJSON(): DirEntry;
}
export declare function chopUrl(url: URL | undefined): string;
export declare function rPad(str: string, len: number, ch?: string): string;
export {};
//# sourceMappingURL=WrappedProviderFs.d.ts.map