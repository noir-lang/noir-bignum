import type { FSCapabilityFlags } from '../VFileSystem.js';
import type { VFileSystemProvider } from '../VirtualFS.js';
export interface RedirectOptions {
    /**
     * Option ts to mask the capabilities of the provider.
     * @default: -1
     */
    capabilitiesMask?: number;
    capabilities?: FSCapabilityFlags;
}
/**
 * Create a provider that will redirect requests from the publicRoot to the privateRoot.
 * This is useful for creating a virtual file system that is a subset of another file system.
 *
 * Example:
 * ```ts
 * const vfs = createVirtualFS();
 * const provider = createRedirectProvider('test', new URL('file:///public/'), new URL('file:///private/'))
 * vfs.registerFileSystemProvider(provider);
 * // Read the content of `file:///private/file.txt`
 * const file = vfs.fs.readFile(new URL('file:///public/file.txt');
 * ```
 *
 * @param name - name of the provider
 * @param publicRoot - the root of the public file system.
 * @param privateRoot - the root of the private file system.
 * @param options - options for the provider.
 * @returns FileSystemProvider
 */
export declare function createRedirectProvider(name: string, publicRoot: URL, privateRoot: URL, options?: RedirectOptions): VFileSystemProvider;
//# sourceMappingURL=redirectProvider.d.ts.map