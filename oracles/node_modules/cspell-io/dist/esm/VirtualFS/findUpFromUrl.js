export async function findUpFromUrl(name, from, options) {
    const { type: entryType = 'file', stopAt, fs } = options;
    let dir = new URL('.', from);
    const root = new URL('/', dir);
    const predicate = makePredicate(fs, name, entryType);
    const stopAtDir = stopAt || root;
    let last = '';
    while (dir.href !== last) {
        const found = await predicate(dir);
        if (found !== undefined)
            return found;
        last = dir.href;
        if (dir.href === root.href || dir.href === stopAtDir.href)
            break;
        dir = new URL('..', dir);
    }
    return undefined;
}
function makePredicate(fs, name, entryType) {
    if (typeof name === 'function')
        return name;
    const checkStat = entryType === 'file' || entryType === '!file' ? 'isFile' : 'isDirectory';
    const checkValue = entryType.startsWith('!') ? false : true;
    function checkName(dir, name) {
        const f = new URL(name, dir);
        return fs
            .stat(f)
            .then((stats) => ((stats.isUnknown() || stats[checkStat]() === checkValue) && f) || undefined)
            .catch(() => undefined);
    }
    if (!Array.isArray(name))
        return (dir) => checkName(dir, name);
    return async (dir) => {
        const pending = name.map((n) => checkName(dir, n));
        for (const p of pending) {
            const found = await p;
            if (found)
                return found;
        }
        return undefined;
    };
}
//# sourceMappingURL=findUpFromUrl.js.map