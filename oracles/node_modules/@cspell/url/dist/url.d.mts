/**
 * Try to make a URL.
 * @param url
 * @param relativeTo - optional URL, if given, url will be parsed as relative.
 * @returns a URL
 */
export declare function toURL(url: string | URL, relativeTo?: string | URL): URL;
/**
 * Try to determine the parent directory URL of the uri.
 * If it is not a hierarchical URL, then it will return the URL.
 * @param url - url to extract the dirname from.
 * @returns a URL
 */
export declare function urlParent(url: string | URL): URL;
/**
 * Alias of {@link urlParent}
 * Try to determine the parent directory URL of the uri.
 * If it is not a hierarchical URL, then it will return the URL.
 * @param url - url to extract the dirname from.
 * @returns a URL
 */
export declare const urlDirname: typeof urlParent;
/**
 * return the basename (last portion of the URL pathname) of a path. It does NOT remove the trailing slash.
 * @param path - URL pathname to extract the basename from.
 */
export declare function basenameOfUrlPathname(path: string): string;
/**
 * @param filename - filename to check if it is a string containing a URL.
 */
export declare function isUrlLike(filename: string): boolean;
export declare function isUrlLike(filename: URL): true;
/**
 * @param filename - filename to check if it is a string containing a URL or a URL object.
 */
export declare function isUrlLike(filename: string | URL): boolean;
/**
 * @param filename - filename to check if it is a string containing a URL.
 */
export declare function isNotUrlLike(filename: string): boolean;
export declare function isNotUrlLike(filename: URL): false;
/**
 * @param filename - filename to check if it is a string containing a URL or a URL object.
 */
export declare function isNotUrlLike(filename: string | URL): filename is string;
/**
 * Check if `url` is a URL instance.
 * @returns
 */
export declare function isURL(url: unknown): url is URL;
/**
 *
 * @param url - url to check
 * @param protocol - protocol to check against - e.g. 'file:', 'http:', 'https:'
 * @returns
 */
export declare function hasProtocol(url: string | URL, protocol: string): boolean;
/**
 * Attempts to add a trailing slash to the URL pathname if it does not already have one.
 * Some If the pathname doesn't start with a `/`, a trailing slash is not added.
 * @param url - a URL
 * @returns
 */
export declare function addTrailingSlash(url: URL): URL;
/**
 * Remove the filename at the end of the URL pathname.
 * If the URL pathname ends with a `/`, it is considered a directory and the URL is returned as is.
 * If the URL pathname does not start with a `/`, it is considered an non-regular URL and the URL is returned as is.
 * @param url
 * @returns
 */
export declare function urlRemoveFilename(url: URL): URL;
/**
 * Extract the filename from the URL pathname.
 *
 * ```ts
 * url.href === new URL(urlFilename(url), urlRemoveFilename(url)).href
 * ```
 * @param url - URL to extract the filename from.
 * @returns the filename or empty string if the URL pathname ends with a `/`.
 */
export declare function urlFilename(url: URL): string;
/**
 * Calculate the relative path to go from `urlFrom` to `urlTo`.
 * The protocol is not evaluated. Only the `url.pathname` is used.
 * @param urlFrom
 * @param urlTo
 * @returns the relative path
 */
export declare function urlRelative(urlFrom: string | URL, urlTo: string | URL): string;
/**
 * Calculate the relative path to go from `urlFrom` to `urlTo`.
 * The protocol is not evaluated. Only the `url.pathname` is used.
 * @param urlFrom
 * @param urlTo
 * @returns the relative path
 */
export declare function urlToUrlRelative(urlFrom: URL, urlTo: URL): string;
export declare const regExpWindowsPath: RegExp;
export declare const regExpEncodedColon: RegExp;
/**
 * Ensure that a windows file url is correctly formatted with a capitol letter for the drive.
 *
 * @param url - URL to check.
 * @returns a new URL if modified or converted from a string.
 */
export declare function normalizeWindowsUrl(url: URL | string): URL;
/**
 * There is a bug is NodeJS that sometimes causes UNC paths converted to a URL to be prefixed with `file:////`.
 * @param url - URL to check.
 * @returns fixed URL if needed.
 */
export declare function fixUncUrl(url: URL): URL;
//# sourceMappingURL=url.d.mts.map