import Path from 'node:path';
export declare const percentRegEx: RegExp;
export declare const backslashRegEx: RegExp;
export declare const newlineRegEx: RegExp;
export declare const carriageReturnRegEx: RegExp;
export declare const tabRegEx: RegExp;
export declare const questionRegex: RegExp;
export declare const hashRegex: RegExp;
export interface PathInterface {
    sep: string;
    resolve(...paths: string[]): string;
    parse(path: string): Path.ParsedPath;
    normalize(path: string): string;
    relative(from: string, to: string): string;
    isAbsolute(path: string): boolean;
}
export interface BuilderOptions {
    windows?: boolean | undefined;
    path?: PathInterface | undefined;
    cwd?: URL | undefined;
}
export declare class FileUrlBuilder {
    #private;
    private windows;
    readonly path: PathInterface;
    readonly cwd: URL;
    constructor(options?: BuilderOptions);
    /**
     * Encode special characters in a file path to use in a URL.
     * @param filepath
     * @returns
     */
    encodePathChars(filepath: string): string;
    /**
     * Normalize a file path for use in a URL.
     * ```js
     * const url = new URL(normalizeFilePathForUrl('path\\to\\file.txt'), 'file:///Users/user/');
     * // Result: file:///Users/user/path/to/file.txt
     * ```
     * @param filePath
     * @returns a normalized file path for use as a relative path in a URL.
     */
    normalizeFilePathForUrl(filePath: string): string;
    /**
     * Try to make a file URL.
     * - if filenameOrUrl is already a URL, it is returned as is.
     * @param filenameOrUrl
     * @param relativeTo - optional URL, if given, filenameOrUrl will be parsed as relative.
     * @returns a URL
     */
    toFileURL(filenameOrUrl: string | URL, relativeTo?: string | URL): URL;
    /**
     * Try to make a URL for a directory.
     * - if dirOrUrl is already a URL, a slash is appended to the pathname.
     * @param dirOrUrl - directory path to convert to a file URL.
     * @param relativeTo - optional URL, if given, filenameOrUrl will be parsed as relative.
     * @returns a URL
     */
    toFileDirURL(dirOrUrl: string | URL, relativeTo?: string | URL): URL;
    urlToFilePathOrHref(url: URL | string): string;
    /**
     * Calculate the relative path to go from `urlFrom` to `urlTo`.
     * The protocol is not evaluated. Only the `url.pathname` is used.
     * The result: `new URL(relative(urlFrom, urlTo), urlFrom).pathname === urlTo.pathname`
     * @param urlFrom
     * @param urlTo
     * @returns the relative path
     */
    relative(urlFrom: URL, urlTo: URL): string;
    /**
     * Get the parent directory of a URL.
     * @param url
     */
    urlDirname(url: URL | string): URL;
    pathToFileURL(pathname: string, relativeToURL?: URL | string): URL;
    rootFileURL(filePath?: string): URL;
    /**
     * Determine if a filePath is absolute.
     *
     * @param filePath
     * @returns true if `URL` or `path.isAbsolute(filePath)`
     */
    isAbsolute(filePath: string): boolean;
    isUrlLike(url: string | URL): boolean;
}
//# sourceMappingURL=FileUrlBuilder.d.mts.map