import { Utf8Accumulator } from './Utf8.js';
const EmptyKeys = Object.freeze([]);
const EmptyNodes = Object.freeze([]);
const EmptyEntries = Object.freeze([]);
class FastTrieBlobINode {
    trie;
    nodeIdx;
    id;
    node;
    eow;
    _keys;
    _count;
    _size;
    _chained;
    _nodesEntries;
    _entries;
    _values;
    charToIdx;
    constructor(trie, nodeIdx) {
        this.trie = trie;
        this.nodeIdx = nodeIdx;
        const node = trie.nodes[nodeIdx];
        this.node = node;
        this.eow = !!(node[0] & trie.NodeMaskEOW);
        this._count = node.length - 1;
        this.id = nodeIdx;
        this.findExact = (word) => trie.nodeFindExact(nodeIdx, word);
    }
    /** get keys to children */
    keys() {
        if (this._keys)
            return this._keys;
        if (!this._count)
            return EmptyKeys;
        this._keys = this.getNodesEntries().map(([key]) => key);
        return this._keys;
    }
    values() {
        if (!this._count)
            return EmptyNodes;
        if (this._values)
            return this._values;
        this._values = this.entries().map(([, value]) => value);
        return this._values;
    }
    entries() {
        if (this._entries)
            return this._entries;
        if (!this._count)
            return EmptyEntries;
        const entries = this.getNodesEntries();
        this._entries = entries.map(([key, value]) => [key, new FastTrieBlobINode(this.trie, value)]);
        return this._entries;
    }
    /** get child ITrieNode */
    get(char) {
        const idx = this.trie.nodeGetChild(this.id, char);
        if (idx === undefined)
            return undefined;
        return new FastTrieBlobINode(this.trie, idx);
    }
    getNode(chars) {
        const idx = this.trie.nodeFindNode(this.id, chars);
        if (idx === undefined)
            return undefined;
        return new FastTrieBlobINode(this.trie, idx);
    }
    has(char) {
        const idx = this.trie.nodeGetChild(this.id, char);
        return idx !== undefined;
    }
    hasChildren() {
        return this._count > 0;
    }
    child(keyIdx) {
        if (!this._values && !this.containsChainedIndexes()) {
            const n = this.node[keyIdx + 1];
            const nodeIdx = n >>> this.trie.NodeChildRefShift;
            return new FastTrieBlobINode(this.trie, nodeIdx);
        }
        return this.values()[keyIdx];
    }
    getCharToIdxMap() {
        const m = this.charToIdx;
        if (m)
            return m;
        const map = Object.create(null);
        const keys = this.keys();
        for (let i = 0; i < keys.length; ++i) {
            map[keys[i]] = i;
        }
        this.charToIdx = map;
        return map;
    }
    findExact(word) {
        return this.trie.nodeFindExact(this.id, word);
    }
    isForbidden(word) {
        const n = this.trie.nodeGetChild(this.id, this.trie.info.forbiddenWordPrefix);
        if (n === undefined)
            return false;
        return this.trie.nodeFindExact(n, word);
    }
    findCaseInsensitive(word) {
        const n = this.trie.nodeGetChild(this.id, this.trie.info.stripCaseAndAccentsPrefix);
        if (n === undefined)
            return false;
        return this.trie.nodeFindExact(n, word);
    }
    containsChainedIndexes() {
        if (this._chained !== undefined)
            return this._chained;
        if (!this._count || !this.trie.isIndexDecoderNeeded) {
            this._chained = false;
            return false;
        }
        // scan the node to see if there are encoded entries.
        let found = false;
        const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
        const len = this._count;
        const node = this.node;
        for (let i = 1; i <= len && !found; ++i) {
            const entry = node[i];
            const codePoint = entry & NodeMaskChildCharIndex;
            found = Utf8Accumulator.isMultiByte(codePoint);
        }
        this._chained = !!found;
        return this._chained;
    }
    getNodesEntries() {
        if (this._nodesEntries)
            return this._nodesEntries;
        if (!this.containsChainedIndexes()) {
            const entries = Array(this._count);
            const nodes = this.node;
            const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
            const RefShift = this.trie.NodeChildRefShift;
            for (let i = 0; i < this._count; ++i) {
                const entry = nodes[i + 1];
                const codePoint = entry & NodeMaskChildCharIndex;
                entries[i] = [String.fromCodePoint(codePoint), entry >>> RefShift];
            }
            this._nodesEntries = entries;
            return entries;
        }
        this._nodesEntries = this.walkChainedIndexes();
        return this._nodesEntries;
    }
    walkChainedIndexes() {
        const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
        const NodeChildRefShift = this.trie.NodeChildRefShift;
        const nodes = this.trie.nodes;
        const acc = Utf8Accumulator.create();
        const stack = [{ n: this.node, c: 1, acc }];
        let depth = 0;
        /** there is at least this._count number of entries, more if there are nested indexes. */
        const entries = Array(this._count);
        let eIdx = 0;
        while (depth >= 0) {
            const s = stack[depth];
            const { n: node, c: off } = s;
            if (off >= node.length) {
                --depth;
                continue;
            }
            ++s.c;
            const entry = node[off];
            const charIdx = entry & NodeMaskChildCharIndex;
            const acc = s.acc.clone();
            const codePoint = acc.decode(charIdx);
            if (codePoint !== undefined) {
                const char = String.fromCodePoint(codePoint);
                const nodeIdx = entry >>> NodeChildRefShift;
                entries[eIdx++] = [char, nodeIdx];
                continue;
            }
            const idx = entry >>> NodeChildRefShift;
            const ss = stack[++depth];
            if (ss) {
                ss.n = nodes[idx];
                ss.c = 1;
                ss.acc = acc;
            }
            else {
                stack[depth] = { n: nodes[idx], c: 1, acc };
            }
        }
        return entries;
    }
    get size() {
        if (this._size === undefined) {
            if (!this.containsChainedIndexes()) {
                this._size = this._count;
                return this._size;
            }
            this._size = this.getNodesEntries().length;
        }
        return this._size;
    }
}
export class FastTrieBlobIRoot extends FastTrieBlobINode {
    hasForbiddenWords;
    hasCompoundWords;
    hasNonStrictWords;
    constructor(trie, nodeIdx) {
        super(trie, nodeIdx);
        this.hasForbiddenWords = trie.hasForbiddenWords;
        this.hasCompoundWords = trie.hasCompoundWords;
        this.hasNonStrictWords = trie.hasNonStrictWords;
    }
    resolveId(id) {
        return new FastTrieBlobINode(this.trie, id);
    }
    find(word, strict) {
        let found = this.findExact(word);
        if (found) {
            return { found: word, compoundUsed: false, caseMatched: true };
        }
        if (strict)
            return undefined;
        found = this.findCaseInsensitive(word);
        return found ? { found: word, compoundUsed: false, caseMatched: false } : undefined;
    }
    get info() {
        return this.trie.info;
    }
    get forbidPrefix() {
        return this.trie.info.forbiddenWordPrefix;
    }
    get compoundFix() {
        return this.trie.info.compoundCharacter;
    }
    get caseInsensitivePrefix() {
        return this.trie.info.stripCaseAndAccentsPrefix;
    }
}
//# sourceMappingURL=FastTrieBlobIRoot.js.map