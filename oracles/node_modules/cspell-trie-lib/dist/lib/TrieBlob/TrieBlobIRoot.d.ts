import type { ITrieNode, ITrieNodeId, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { TrieCharacteristics, TrieInfo } from '../ITrieNode/TrieInfo.js';
import { CharIndex } from './CharIndex.js';
interface BitMaskInfo {
    readonly NodeMaskEOW: number;
    readonly NodeMaskNumChildren: number;
    readonly NodeMaskChildCharIndex: number;
    readonly NodeChildRefShift: number;
}
type Node = number;
type NodeIndex = number;
interface TrieMethods extends Readonly<TrieCharacteristics> {
    readonly nodeFindNode: (idx: number, word: string) => number | undefined;
    readonly nodeFindExact: (idx: number, word: string) => boolean;
    readonly nodeGetChild: (idx: number, letter: string) => number | undefined;
    readonly isForbidden: (word: string) => boolean;
    readonly findExact: (word: string) => boolean;
}
export declare class TrieBlobInternals implements TrieMethods, BitMaskInfo {
    readonly nodes: Uint32Array;
    readonly charIndex: Readonly<CharIndex>;
    readonly NodeMaskEOW: number;
    readonly NodeMaskNumChildren: number;
    readonly NodeMaskChildCharIndex: number;
    readonly NodeChildRefShift: number;
    readonly isIndexDecoderNeeded: boolean;
    readonly nodeFindExact: (idx: number, word: string) => boolean;
    readonly isForbidden: (word: string) => boolean;
    readonly findExact: (word: string) => boolean;
    readonly nodeGetChild: (idx: number, letter: string) => number | undefined;
    readonly nodeFindNode: (idx: number, word: string) => number | undefined;
    readonly hasForbiddenWords: boolean;
    readonly hasCompoundWords: boolean;
    readonly hasNonStrictWords: boolean;
    constructor(nodes: Uint32Array, charIndex: Readonly<CharIndex>, maskInfo: BitMaskInfo, methods: TrieMethods);
}
export interface ITrieSupportMethods extends Readonly<Pick<ITrieNodeRoot, 'find'>> {
}
declare class TrieBlobINode implements ITrieNode {
    #private;
    readonly trie: TrieBlobInternals;
    readonly nodeIdx: NodeIndex;
    readonly id: number;
    readonly node: Node;
    readonly eow: boolean;
    private _keys;
    private _count;
    private _size;
    private _chained;
    private _nodesEntries;
    private _entries;
    private _values;
    protected charToIdx: Readonly<Record<string, number>> | undefined;
    constructor(trie: TrieBlobInternals, nodeIdx: NodeIndex);
    /** get keys to children */
    keys(): readonly string[];
    values(): readonly ITrieNode[];
    entries(): readonly (readonly [string, ITrieNode])[];
    /** get child ITrieNode */
    get(char: string): ITrieNode | undefined;
    has(char: string): boolean;
    hasChildren(): boolean;
    child(keyIdx: number): ITrieNode;
    getCharToIdxMap(): Record<string, number>;
    getNode(word: string): ITrieNode | undefined;
    findExact(word: string): boolean;
    private containsChainedIndexes;
    private getNodesEntries;
    private walkChainedIndexes;
    get size(): number;
}
export declare class TrieBlobIRoot extends TrieBlobINode implements ITrieNodeRoot {
    readonly info: Readonly<TrieInfo>;
    find: ITrieNodeRoot['find'];
    isForbidden: ITrieNodeRoot['isForbidden'];
    readonly hasForbiddenWords: boolean;
    readonly hasCompoundWords: boolean;
    readonly hasNonStrictWords: boolean;
    constructor(trie: TrieBlobInternals, nodeIdx: number, info: Readonly<TrieInfo>, methods: ITrieSupportMethods);
    resolveId(id: ITrieNodeId): ITrieNode;
    get forbidPrefix(): string;
    get compoundFix(): string;
    get caseInsensitivePrefix(): string;
}
export {};
//# sourceMappingURL=TrieBlobIRoot.d.ts.map