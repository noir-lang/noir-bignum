import type { ITrieNode, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { TrieInfo } from '../ITrieNode/TrieInfo.js';
import type { TrieData } from '../TrieData.js';
import { Utf8Seq } from './CharIndex.js';
import { type FastTrieBlobBitMaskInfo } from './FastTrieBlobBitMaskInfo.js';
import { FastTrieBlobInternals } from './FastTrieBlobInternals.js';
import { TrieBlob } from './TrieBlob.js';
import { Utf8Accumulator } from './Utf8.js';
type FastTrieBlobNode = Uint32Array;
export declare class FastTrieBlob implements TrieData {
    #private;
    private nodes;
    private _charIndex;
    readonly bitMasksInfo: FastTrieBlobBitMaskInfo;
    readonly info: Readonly<TrieInfo>;
    private _readonly;
    private _iTrieRoot;
    wordToCharacters: (word: string) => readonly string[];
    readonly hasForbiddenWords: boolean;
    readonly hasCompoundWords: boolean;
    readonly hasNonStrictWords: boolean;
    private constructor();
    wordToUtf8Seq(word: string): Utf8Seq;
    private letterToUtf8Seq;
    has(word: string): boolean;
    hasCaseInsensitive(word: string): boolean;
    words(): Iterable<string>;
    toTrieBlob(): TrieBlob;
    isReadonly(): boolean;
    freeze(): this;
    toJSON(): {
        info: Readonly<TrieInfo>;
        nodes: ({
            i: number;
            w: number;
            c?: never;
        } | {
            i: number;
            w: number;
            c: {
                i: number;
                c: string | 0 | undefined;
                s: string;
            }[];
        })[];
    };
    static create(data: FastTrieBlobInternals): FastTrieBlob;
    static toITrieNodeRoot(trie: FastTrieBlob): ITrieNodeRoot;
    static NodeMaskEOW: number;
    static NodeChildRefShift: number;
    static NodeMaskChildCharIndex: number;
    static DefaultBitMaskInfo: FastTrieBlobBitMaskInfo;
    get iTrieRoot(): ITrieNodeRoot;
    getRoot(): ITrieNodeRoot;
    getNode(prefix: string): ITrieNode | undefined;
    isForbiddenWord(word: string): boolean;
    nodeInfo(nodeIndex: number, accumulator?: Utf8Accumulator): TrieBlobNodeInfo;
    /** number of nodes */
    get size(): number;
    get charIndex(): readonly string[];
    static fromTrieBlob(trie: TrieBlob): FastTrieBlob;
    static isFastTrieBlob(obj: unknown): obj is FastTrieBlob;
}
interface TrieBlobNodeInfo {
    eow: boolean;
    children: {
        c: string;
        i: number;
        cIdx: number;
    }[];
}
export declare function nodesToJSON<T extends FastTrieBlobNode | Uint32Array>(nodes: Readonly<T[]>): ({
    i: number;
    w: number;
    c?: never;
} | {
    i: number;
    w: number;
    c: {
        i: number;
        c: string | 0 | undefined;
        s: string;
    }[];
})[];
export {};
//# sourceMappingURL=FastTrieBlob.d.ts.map