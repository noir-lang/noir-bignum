import { type Utf8BE32 } from './Utf8.js';
export type Utf8Seq = Readonly<number[]>;
export type CharIndexMap = Map<string, Utf8BE32>;
export type RO_CharIndexMap = Readonly<CharIndexMap>;
export type CharIndexSeqMap = Map<string, Utf8Seq>;
export type RO_CharIndexSeqMap = Readonly<CharIndexSeqMap>;
export declare class CharIndex {
    #private;
    readonly charIndex: readonly string[];
    constructor(charIndex: readonly string[]);
    getCharUtf8Seq(c: string): Utf8Seq;
    wordToUtf8Seq(word: string): Utf8Seq;
    indexContainsMultiByteChars(): boolean;
    get size(): number;
    toJSON(): {
        charIndex: readonly string[];
    };
}
export declare class CharIndexBuilder {
    #private;
    private readonly charIndex;
    readonly charIndexMap: CharIndexMap;
    readonly charIndexSeqMap: CharIndexSeqMap;
    constructor();
    getUtf8Value(c: string): number;
    utf8ValueToUtf8Seq(idx: number): number[];
    charToUtf8Seq(c: string): number[];
    wordToUtf8Seq(word: string): number[];
    get size(): number;
    build(): CharIndex;
}
//# sourceMappingURL=CharIndex.d.ts.map