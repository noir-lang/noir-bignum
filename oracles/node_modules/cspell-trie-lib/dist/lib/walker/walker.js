import { trieNodeToITrieNode } from '../TrieNode/trie.js';
import { CompoundWordsMethod, JOIN_SEPARATOR, WORD_SEPARATOR } from './walkerTypes.js';
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
function* compoundWalker(root, compoundingMethod) {
    const roots = {
        [CompoundWordsMethod.NONE]: [],
        [CompoundWordsMethod.JOIN_WORDS]: [[JOIN_SEPARATOR, root]],
        [CompoundWordsMethod.SEPARATE_WORDS]: [[WORD_SEPARATOR, root]],
    };
    const rc = roots[compoundingMethod].length ? roots[compoundingMethod] : undefined;
    const empty = [];
    function children(n) {
        if (n.c && n.f && rc) {
            return [...Object.entries(n.c), ...rc];
        }
        if (n.c) {
            return Object.entries(n.c);
        }
        if (n.f && rc) {
            return rc;
        }
        return empty;
    }
    let depth = 0;
    const stack = [];
    stack[depth] = { t: '', c: children(root), ci: 0 };
    while (depth >= 0) {
        let s = stack[depth];
        let baseText = s.t;
        while (s.ci < s.c.length) {
            const [char, node] = s.c[s.ci++];
            const text = baseText + char;
            const goDeeper = yield { text, node, depth };
            if (goDeeper ?? true) {
                depth++;
                baseText = text;
                stack[depth] = { t: text, c: children(node), ci: 0 };
            }
            s = stack[depth];
        }
        depth -= 1;
    }
}
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
function* nodeWalker(root) {
    const empty = [];
    function children(n) {
        if (n.c) {
            return Object.keys(n.c);
        }
        return empty;
    }
    let depth = 0;
    const stack = [];
    stack[depth] = { t: '', n: root.c, c: children(root), ci: 0 };
    while (depth >= 0) {
        let s = stack[depth];
        let baseText = s.t;
        while (s.ci < s.c.length && s.n) {
            const char = s.c[s.ci++];
            const node = s.n[char];
            const text = baseText + char;
            const goDeeper = yield { text, node, depth };
            if (goDeeper !== false) {
                depth++;
                baseText = text;
                const s = stack[depth];
                const c = children(node);
                if (s) {
                    s.t = text;
                    s.n = node.c;
                    s.c = c;
                    s.ci = 0;
                }
                else {
                    stack[depth] = { t: text, n: node.c, c, ci: 0 };
                }
            }
            s = stack[depth];
        }
        depth -= 1;
    }
}
const useITrie = false;
export const walkerWords = useITrie ? _walkerWords2 : _walkerWords;
/**
 * Walks the Trie and yields each word.
 */
function* _walkerWords(root) {
    const empty = [];
    function children(n) {
        if (n.c) {
            return Object.keys(n.c);
        }
        return empty;
    }
    let depth = 0;
    const stack = [];
    stack[depth] = { t: '', n: root.c, c: children(root), ci: 0 };
    while (depth >= 0) {
        let s = stack[depth];
        let baseText = s.t;
        while (s.ci < s.c.length && s.n) {
            const char = s.c[s.ci++];
            const node = s.n[char];
            const text = baseText + char;
            if (node.f)
                yield text;
            depth++;
            baseText = text;
            const c = children(node);
            if (stack[depth]) {
                s = stack[depth];
                s.t = text;
                s.n = node.c;
                s.c = c;
                s.ci = 0;
            }
            else {
                stack[depth] = { t: text, n: node.c, c, ci: 0 };
            }
            s = stack[depth];
        }
        depth -= 1;
    }
}
export function walker(root, compoundingMethod = CompoundWordsMethod.NONE) {
    return compoundingMethod === CompoundWordsMethod.NONE ? nodeWalker(root) : compoundWalker(root, compoundingMethod);
}
function _walkerWords2(root) {
    return walkerWordsITrie(trieNodeToITrieNode(root));
}
/**
 * Walks the Trie and yields each word.
 */
export function* walkerWordsITrie(root) {
    let depth = 0;
    const stack = [];
    stack[depth] = { t: '', n: root, c: [...root.entries()], ci: 0 };
    while (depth >= 0) {
        let s = stack[depth];
        let baseText = s.t;
        while (s.ci < s.c.length && s.n) {
            const [char, node] = s.c[s.ci++];
            if (!node)
                continue;
            const text = baseText + char;
            if (node.eow)
                yield text;
            depth++;
            baseText = text;
            const c = [...node.entries()];
            if (stack[depth]) {
                s = stack[depth];
                s.t = text;
                s.n = node;
                s.c = c;
                s.ci = 0;
            }
            else {
                stack[depth] = { t: text, n: node, c, ci: 0 };
            }
            s = stack[depth];
        }
        depth -= 1;
    }
}
//# sourceMappingURL=walker.js.map