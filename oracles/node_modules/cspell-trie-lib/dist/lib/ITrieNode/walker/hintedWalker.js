import { isDefined } from '../../utils/isDefined.js';
import { CompoundWordsMethod, JOIN_SEPARATOR, WORD_SEPARATOR } from './walkerTypes.js';
export function hintedWalker(root, ignoreCase, hint, compoundingMethod, emitWordSeparator) {
    return hintedWalkerNext(root, ignoreCase, hint, compoundingMethod, emitWordSeparator);
}
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
function* hintedWalkerNext(root, ignoreCase, hint, compoundingMethod, emitWordSeparator = '') {
    const _compoundingMethod = compoundingMethod ?? CompoundWordsMethod.NONE;
    const trieInfo = root.info;
    const compoundCharacter = trieInfo.compoundCharacter;
    const noCaseCharacter = trieInfo.stripCaseAndAccentsPrefix;
    const rawRoots = [root, ignoreCase ? root.get(noCaseCharacter) : undefined].filter(isDefined);
    const specialRootsPrefix = existMap([compoundCharacter, noCaseCharacter, trieInfo.forbiddenWordPrefix]);
    function filterRoot(root) {
        return new ITrieNodeFiltered(root, ([v]) => !(v in specialRootsPrefix));
    }
    const roots = rawRoots.map(filterRoot);
    const compoundRoots = rawRoots.map((r) => r.get(compoundCharacter)).filter(isDefined);
    const setOfCompoundRoots = new Set(compoundRoots);
    const rootsForCompoundMethods = [...roots, ...compoundRoots];
    const compoundMethodRoots = {
        [CompoundWordsMethod.NONE]: [],
        [CompoundWordsMethod.JOIN_WORDS]: rootsForCompoundMethods.map((r) => [JOIN_SEPARATOR, r]),
        [CompoundWordsMethod.SEPARATE_WORDS]: rootsForCompoundMethods.map((r) => [WORD_SEPARATOR, r]),
    };
    function* children(n, hintOffset) {
        if (n.hasChildren()) {
            const h = hint.slice(hintOffset, hintOffset + 3) + hint.slice(Math.max(0, hintOffset - 2), hintOffset);
            const hints = new Set(h);
            // First yield the hints
            yield* [...hints]
                .map((a) => [a, n.get(a)])
                .map(([letter, node]) => node && {
                letter,
                node,
                hintOffset: hintOffset + 1,
            })
                .filter(isDefined);
            // We don't want to suggest the compound character.
            hints.add(compoundCharacter);
            // Then yield everything else.
            const entries = n.entries();
            yield* (Array.isArray(entries) ? entries : [...entries])
                .filter((a) => !hints.has(a[0]))
                .map(([letter, node]) => ({
                letter,
                node,
                hintOffset: hintOffset + 1,
            }));
            if (n.has(compoundCharacter) && !setOfCompoundRoots.has(n)) {
                for (const compoundRoot of compoundRoots) {
                    for (const child of children(compoundRoot, hintOffset)) {
                        const { letter, node, hintOffset } = child;
                        yield { letter: emitWordSeparator + letter, node, hintOffset };
                    }
                }
            }
        }
        if (n.eow) {
            yield* [...compoundMethodRoots[_compoundingMethod]].map(([letter, node]) => ({
                letter: letter,
                node,
                hintOffset,
            }));
        }
    }
    for (const root of roots) {
        let depth = 0;
        const stack = [];
        const stackText = [''];
        stack[depth] = children(root, depth);
        let ir;
        while (depth >= 0) {
            while (!(ir = stack[depth].next()).done) {
                const { letter: char, node, hintOffset } = ir.value;
                const text = stackText[depth] + char;
                const hinting = (yield { text, node, depth });
                if (hinting && hinting.goDeeper) {
                    depth++;
                    stackText[depth] = text;
                    stack[depth] = children(node, hintOffset);
                }
            }
            depth -= 1;
        }
    }
}
function existMap(values) {
    const m = Object.create(null);
    for (const v of values) {
        m[v] = true;
    }
    return m;
}
export const __testing__ = {
    hintedWalkerNext,
};
class ITrieNodeFiltered {
    srcNode;
    id;
    eow;
    size;
    filtered;
    keyMap;
    constructor(srcNode, predicate) {
        this.srcNode = srcNode;
        this.id = srcNode.id;
        this.eow = srcNode.eow;
        const entries = srcNode.entries();
        this.filtered = (Array.isArray(entries) ? entries : [...entries]).filter(([key], idx) => predicate(key, idx, srcNode));
        this.keyMap = new Map(this.filtered);
        this.size = this.keyMap.size;
    }
    keys() {
        return [...this.keyMap.keys()];
    }
    values() {
        return this.filtered.map(([, node]) => node);
    }
    entries() {
        return this.filtered;
    }
    has(char) {
        return this.keyMap.has(char);
    }
    hasChildren() {
        return this.size > 0;
    }
    get(char) {
        const node = this.keyMap.get(char);
        if (node === undefined)
            return undefined;
        return node;
    }
}
//# sourceMappingURL=hintedWalker.js.map