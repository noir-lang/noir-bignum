import type { ITrieNode } from './ITrieNode.js';
import type { YieldResult } from './walker/walkerTypes.js';
export declare function isWordTerminationNode(node: ITrieNode): boolean;
/**
 * Generator an iterator that will walk the Trie parent then children in a depth first fashion that preserves sorted order.
 */
export declare function walk(node: ITrieNode): Iterable<YieldResult>;
export declare const iterateTrie: typeof walk;
/**
 * Generate a Iterator that can walk a Trie and yield the words.
 */
export declare function iteratorTrieWords(node: ITrieNode): Iterable<string>;
export declare function has(node: ITrieNode, word: string): boolean;
export declare function findNode(node: ITrieNode, word: string): ITrieNode | undefined;
export declare function countNodes(root: ITrieNode): number;
export declare function countWords(root: ITrieNode): number;
//# sourceMappingURL=trie-util.d.ts.map