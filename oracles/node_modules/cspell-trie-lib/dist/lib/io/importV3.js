import { TrieNodeBuilder } from '../TrieNode/TrieNodeBuilder.js';
import { getGlobalPerfTimer } from '../utils/timer.js';
import { BACK, EOL, EOR, EOW, ESCAPE, LF, REF } from './constants.js';
const specialCharacterMap = new Map([
    ['\n', '\\n'],
    ['\r', '\\r'],
    ['\\', '\\\\'],
]);
const characterMap = new Map([...specialCharacterMap].map((a) => [a[1], a[0]]));
const DATA = '__DATA__';
export function importTrieV3AsTrieRoot(srcLines) {
    const builder = new TrieNodeBuilder();
    return importTrieV3WithBuilder(builder, srcLines);
}
export function importTrieV3WithBuilder(builder, srcLines) {
    const timer = getGlobalPerfTimer();
    const timerStart = timer.start('importTrieV3');
    const dataLines = typeof srcLines === 'string' ? srcLines.split('\n') : Array.isArray(srcLines) ? srcLines : [...srcLines];
    let radix = 16;
    const comment = /^\s*#/;
    function parseHeaderRows(headerRows) {
        const header = headerRows.slice(0, 2).join('\n');
        const headerReg = /^TrieXv3\nbase=(\d+)$/;
        /* istanbul ignore if */
        if (!headerReg.test(header))
            throw new Error('Unknown file format');
        radix = Number.parseInt(header.replace(headerReg, '$1'), 10);
    }
    function findStartOfData(data) {
        for (let i = 0; i < data.length; ++i) {
            const line = data[i];
            if (line.includes(DATA)) {
                return i;
            }
        }
        return -1;
    }
    function readHeader(data) {
        const headerRows = [];
        for (const hLine of data) {
            const line = hLine.trim();
            if (!line || comment.test(line)) {
                continue;
            }
            if (line === DATA) {
                break;
            }
            headerRows.push(line);
        }
        parseHeaderRows(headerRows);
    }
    const startOfData = findStartOfData(dataLines);
    if (startOfData < 0) {
        throw new Error('Unknown file format');
    }
    readHeader(dataLines.slice(0, startOfData));
    const cursor = builder.getCursor();
    let node = {
        cursor,
        parser: undefined,
    };
    const parser = parseStream(radix);
    const timerParse = timer.start('importTrieV3.parse');
    for (let i = startOfData + 1; i < dataLines.length; ++i) {
        const line = dataLines[i];
        for (const c of line) {
            node = parser(node, c);
        }
    }
    timerParse();
    timerStart();
    return builder.build();
}
function parseStream(radix) {
    function parseReference(acc, _) {
        let ref = '';
        function parser(acc, s) {
            if (s === EOR) {
                const { cursor } = acc;
                const r = Number.parseInt(ref, radix);
                // +1 is used because EOW node was added but not counted.
                cursor.reference(r + 1);
                acc.parser = undefined;
                return acc;
            }
            ref = ref + s;
            return acc;
        }
        acc.parser = parser;
        return acc;
    }
    function parseEscapeCharacter(acc, _) {
        let prev = '';
        const parser = function (acc, s) {
            if (prev) {
                s = characterMap.get(prev + s) || s;
                acc.parser = undefined;
                return parseCharacter(acc, s);
            }
            if (s === ESCAPE) {
                prev = s;
                return acc;
            }
            acc.parser = undefined;
            return parseCharacter(acc, s);
        };
        acc.parser = parser;
        return acc;
    }
    function parseCharacter(acc, s) {
        acc.cursor.insertChar(s);
        acc.parser = undefined;
        return acc;
    }
    function parseEOW(acc, _) {
        acc.parser = parseBack;
        acc.cursor.markEOW();
        // EOW is set on the way out, so it implies a back step.
        acc.cursor.backStep(1);
        return acc;
    }
    const charactersBack = stringToCharSet(BACK + '23456789');
    function parseBack(acc, s) {
        if (!(s in charactersBack)) {
            acc.parser = undefined;
            return parserMain(acc, s);
        }
        const n = s === BACK ? 1 : Number.parseInt(s, 10) - 1;
        acc.cursor.backStep(n);
        acc.parser = parseBack;
        return acc;
    }
    function parseIgnore(acc, _) {
        return acc;
    }
    const parsers = new Map([
        [EOW, parseEOW],
        [BACK, parseBack],
        [REF, parseReference],
        [ESCAPE, parseEscapeCharacter],
        [EOL, parseIgnore],
        [LF, parseIgnore],
    ]);
    function parserMain(acc, s) {
        const parser = acc.parser ?? parsers.get(s) ?? parseCharacter;
        return parser(acc, s);
    }
    return parserMain;
}
function stringToCharSet(values) {
    const set = Object.create(null);
    const len = values.length;
    for (let i = 0; i < len; ++i) {
        set[values[i]] = true;
    }
    return set;
}
//# sourceMappingURL=importV3.js.map