import { opAppend, opFilter, opMap, pipe } from '@cspell/cspell-pipe/sync';
import { createFindOptions, findLegacyCompound, findWord, findWordNode, isForbiddenWord } from './ITrieNode/find.js';
import { countWords, iteratorTrieWords } from './ITrieNode/trie-util.js';
import { walker } from './ITrieNode/walker/walker.js';
import { createSuggestionOptions } from './suggestions/genSuggestionsOptions.js';
import { genSuggestions, suggest } from './suggestions/suggestTrieData.js';
import { FastTrieBlobBuilder } from './TrieBlob/FastTrieBlobBuilder.js';
import { clean } from './utils/clean.js';
import { mergeOptionalWithDefaults } from './utils/mergeOptionalWithDefaults.js';
import { replaceAllFactory } from './utils/util.js';
const defaultLegacyMinCompoundLength = 3;
export class ITrieImpl {
    data;
    numNodes;
    _info;
    root;
    count;
    weightMap;
    #optionsCompound = this.createFindOptions({ compoundMode: 'compound' });
    hasForbiddenWords;
    hasCompoundWords;
    hasNonStrictWords;
    constructor(data, numNodes) {
        this.data = data;
        this.numNodes = numNodes;
        this.root = data.getRoot();
        this._info = mergeOptionalWithDefaults(data.info);
        this.hasForbiddenWords = data.hasForbiddenWords;
        this.hasCompoundWords = data.hasCompoundWords;
        this.hasNonStrictWords = data.hasNonStrictWords;
    }
    /**
     * Number of words in the Trie, the first call to this method might be expensive.
     * Use `size` to get the number of nodes.
     */
    numWords() {
        this.count ??= countWords(this.root);
        return this.count;
    }
    isNumWordsKnown() {
        return this.count !== undefined;
    }
    get size() {
        return this.data.size;
    }
    get info() {
        return this._info;
    }
    get isCaseAware() {
        return this.info.isCaseAware ?? true;
    }
    /**
     * @param text - text to find in the Trie
     */
    find(text) {
        return findWordNode(this.data.getRoot(), text, this.#optionsCompound).node;
    }
    has(word, minLegacyCompoundLength) {
        if (this.hasWord(word, false))
            return true;
        if (minLegacyCompoundLength) {
            const f = this.findWord(word, { useLegacyWordCompounds: minLegacyCompoundLength });
            return !!f.found;
        }
        return false;
    }
    /**
     * Determine if a word is in the dictionary.
     * @param word - the exact word to search for - must be normalized.
     * @param caseSensitive - false means also searching a dictionary where the words were normalized to lower case and accents removed.
     * @returns true if the word was found and is not forbidden.
     */
    hasWord(word, caseSensitive) {
        const f = this.findWord(word, { caseSensitive, checkForbidden: false });
        return !!f.found;
    }
    findWord(word, options) {
        if (options?.useLegacyWordCompounds) {
            const len = options.useLegacyWordCompounds !== true
                ? options.useLegacyWordCompounds
                : defaultLegacyMinCompoundLength;
            const findOptions = this.createFindOptions({
                legacyMinCompoundLength: len,
                matchCase: options.caseSensitive || false,
            });
            return findLegacyCompound(this.root, word, findOptions);
        }
        return findWord(this.root, word, {
            matchCase: options?.caseSensitive,
            checkForbidden: options?.checkForbidden,
        });
    }
    /**
     * Determine if a word is in the forbidden word list.
     * @param word the word to lookup.
     */
    isForbiddenWord(word) {
        return this.hasForbiddenWords && isForbiddenWord(this.root, word, this.info.forbiddenWordPrefix);
    }
    /**
     * Provides an ordered sequence of words with the prefix of text.
     */
    completeWord(text) {
        const n = this.find(text);
        const compoundChar = this.info.compoundCharacter;
        const subNodes = pipe(n ? iteratorTrieWords(n) : [], opFilter((w) => w[w.length - 1] !== compoundChar), opMap((suffix) => text + suffix));
        return pipe(n && n.eow ? [text] : [], opAppend(subNodes));
    }
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     * @param text - the text to search for
     * @param maxNumSuggestions - the maximum number of suggestions to return.
     * @param compoundMethod - Use to control splitting words.
     * @param numChanges - the maximum number of changes allowed to text. This is an approximate value, since some changes cost less than others.
     *                      the lower the value, the faster results are returned. Values less than 4 are best.
     */
    suggest(text, options) {
        return this.suggestWithCost(text, options).map((a) => a.word);
    }
    /**
     * Suggest spellings for `text`.  The results are sorted by edit distance with changes near the beginning of a word having a greater impact.
     * The results include the word and adjusted edit cost.  This is useful for merging results from multiple tries.
     */
    suggestWithCost(text, options) {
        const sep = options.compoundSeparator;
        const weightMap = options.weightMap || this.weightMap;
        const adjWord = sep ? replaceAllFactory(sep, '') : (a) => a;
        const optFilter = options.filter;
        const filter = optFilter
            ? (word, cost) => {
                const w = adjWord(word);
                return !this.isForbiddenWord(w) && optFilter(w, cost);
            }
            : (word) => !this.isForbiddenWord(adjWord(word));
        const opts = { ...options, filter, weightMap };
        return suggest(this.data, text, opts);
    }
    /**
     * genSuggestions will generate suggestions and send them to `collector`. `collector` is responsible for returning the max acceptable cost.
     * Costs are measured in weighted changes. A cost of 100 is the same as 1 edit. Some edits are considered cheaper.
     * Returning a MaxCost < 0 will effectively cause the search for suggestions to stop.
     */
    genSuggestions(collector, compoundMethod) {
        const filter = (word) => !this.isForbiddenWord(word);
        const options = createSuggestionOptions(clean({ compoundMethod, ...collector.genSuggestionOptions }));
        const suggestions = genSuggestions(this.data, collector.word, options);
        collector.collect(suggestions, undefined, filter);
    }
    /**
     * Returns an iterator that can be used to get all words in the trie. For some dictionaries, this can result in millions of words.
     */
    words() {
        return iteratorTrieWords(this.root);
    }
    /**
     * Allows iteration over the entire tree.
     * On the returned Iterator, calling .next(goDeeper: boolean), allows for controlling the depth.
     */
    iterate() {
        return walker(this.root);
    }
    static create(words, info) {
        const builder = new FastTrieBlobBuilder(info);
        builder.insert(words);
        const root = builder.build();
        return new ITrieImpl(root, undefined);
    }
    createFindOptions(options) {
        const findOptions = createFindOptions(options);
        return findOptions;
    }
}
//# sourceMappingURL=ITrie.js.map