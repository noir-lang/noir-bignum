export interface Timer {
    /**
     * Calculate the amount of time in ms since the
     * timer was created / started.
     */
    (): number;
}
export declare function startTimer(): Timer;
export declare function measure<R>(name: string, fn: () => R, log?: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
}): R;
export declare function measureAsync<R>(name: string, fn: () => Promise<R>, log?: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
}): Promise<R>;
type StopTimer = Timer;
export interface PerfTimer {
    start(name?: string): StopTimer;
    stop(name?: string): number;
    mark(name: string): number;
    elapsed(): number;
    report(reporter?: (text: string) => void): void;
    formatReport(): string;
    measureFn<R>(name: string, fn: () => R): R;
    measureAsyncFn<R>(name: string, fn: () => Promise<R>): Promise<R>;
}
export declare function createPerfTimer(): PerfTimer;
export declare function getGlobalPerfTimer(): PerfTimer;
export {};
//# sourceMappingURL=timer.d.ts.map