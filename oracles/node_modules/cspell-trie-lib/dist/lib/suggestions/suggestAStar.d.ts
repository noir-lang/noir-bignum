import type { ITrieNode } from '../ITrieNode/index.js';
import type { TrieData } from '../TrieData.js';
import type { SuggestionOptions } from './genSuggestionsOptions.js';
import type { SuggestionGenerator, SuggestionResult } from './SuggestionTypes.js';
type Cost = number;
type WordIndex = number;
/** A Trie structure used to track accumulated costs */
interface CostTrie {
    /** cost by index */
    c: number[];
    t: Record<string, CostTrie | undefined>;
}
interface PNode {
    /** current node */
    n: ITrieNode;
    /** Accumulated cost */
    c: Cost;
    /** Index into src word */
    i: WordIndex;
    /** letter used or '' */
    s: string;
    /** parent node */
    p: PNode | undefined;
    /** cost trie to reduce duplicate paths */
    t: CostTrie;
    /** edit action taken */
    a?: string;
}
/**
 * Compare Path Nodes.
 * Balance the calculation between depth vs cost
 */
declare function comparePath(a: PNode, b: PNode): number;
export declare function suggestAStar(trie: TrieData, word: string, options?: SuggestionOptions): SuggestionResult[];
export declare function getSuggestionsAStar(trie: TrieData, srcWord: string, options?: SuggestionOptions): SuggestionGenerator;
declare function editHistory(p: PNode): {
    i: number;
    c: number;
    a: string | undefined;
    s: string;
}[];
declare function serializeCostTrie(p: PNode): string;
export declare const __testing__: {
    comparePath: typeof comparePath;
    editHistory: typeof editHistory;
    serializeCostTrie: typeof serializeCostTrie;
};
export {};
//# sourceMappingURL=suggestAStar.d.ts.map