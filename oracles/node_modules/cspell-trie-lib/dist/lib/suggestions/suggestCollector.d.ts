import type { WeightMap } from '../distance/index.js';
import type { RequireOptional } from '../types.js';
import type { GenSuggestionOptions, GenSuggestionOptionsStrict } from './genSuggestionsOptions.js';
import type { GenerateSuggestionResult, SuggestionGenerator, SuggestionResult, SuggestionResultBase } from './SuggestionTypes.js';
export declare function compSuggestionResults(a: SuggestionResultBase, b: SuggestionResultBase): number;
export type FilterWordFn = (word: string, cost: number) => boolean;
export interface SuggestionCollector {
    /**
     * Collection suggestions from a SuggestionIterator
     * @param src - the SuggestionIterator used to generate suggestions.
     * @param timeout - the amount of time in milliseconds to allow for suggestions.
     * before sending `symbolStopProcessing`
     * Iterator implementation:
     * @example
     * r = yield(suggestion);
     * if (r === collector.symbolStopProcessing) // ...stop generating suggestions.
     */
    collect: (src: SuggestionGenerator, timeout?: number, filter?: FilterWordFn) => void;
    add: (suggestion: SuggestionResultBase) => SuggestionCollector;
    readonly suggestions: SuggestionResult[];
    readonly changeLimit: number;
    readonly maxCost: number;
    readonly word: string;
    readonly maxNumSuggestions: number;
    readonly includesTies: boolean;
    readonly ignoreCase: boolean;
    readonly genSuggestionOptions: GenSuggestionOptions;
    /**
     * Possible value sent to the SuggestionIterator telling it to stop processing.
     */
    readonly symbolStopProcessing: symbol;
}
export interface SuggestionCollectorOptions extends Omit<GenSuggestionOptionsStrict, 'ignoreCase' | 'changeLimit'> {
    /**
     * number of best matching suggestions.
     * @default 10
     */
    numSuggestions: number;
    /**
     * An optional filter function that can be used to limit remove unwanted suggestions.
     * I.E. to remove forbidden terms.
     * @default () => true
     */
    filter?: FilterWordFn | undefined;
    /**
     * The number of letters that can be changed when looking for a match
     * @default 5
     */
    changeLimit: number | undefined;
    /**
     * Include suggestions with tied cost even if the number is greater than `numSuggestions`.
     * @default true
     */
    includeTies?: boolean | undefined;
    /**
     * specify if case / accents should be ignored when looking for suggestions.
     * @default true
     */
    ignoreCase: boolean | undefined;
    /**
     * the total amount of time to allow for suggestions.
     * @default 1000
     */
    timeout?: number | undefined;
    /**
     * Used to improve the sorted results.
     */
    weightMap?: WeightMap | undefined;
}
export declare const defaultSuggestionCollectorOptions: RequireOptional<SuggestionCollectorOptions>;
export declare function suggestionCollector(wordToMatch: string, options: SuggestionCollectorOptions): SuggestionCollector;
/**
 * Impersonating a Collector, allows searching for multiple variants on the same word.
 * The collection is still in the original collector.
 * @param collector - collector to impersonate
 * @param word - word to present instead of `collector.word`.
 * @returns a SuggestionCollector
 */
export declare function impersonateCollector(collector: SuggestionCollector, word: string): SuggestionCollector;
export declare function isSuggestionResult(s: GenerateSuggestionResult): s is SuggestionResult;
//# sourceMappingURL=suggestCollector.d.ts.map