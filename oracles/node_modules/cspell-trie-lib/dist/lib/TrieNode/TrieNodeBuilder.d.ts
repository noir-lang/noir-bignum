import { type BuilderCursor, type TrieBuilder } from '../Builder/index.js';
import type { PartialTrieOptions, TrieOptions } from '../trie.js';
import type { ChildMap, TrieNode, TrieRoot } from './TrieNode.js';
import { TrieNodeTrie } from './TrieNodeTrie.js';
interface LockableTrieNode extends TrieNode {
    /** locked */
    k?: true;
}
interface TrieNodeBranch extends LockableTrieNode {
    c: ChildMap;
}
export declare class TrieNodeBuilder implements TrieBuilder<TrieNodeTrie> {
    private _cursor;
    root: TrieRoot;
    shouldSort: boolean;
    wordToCharacters: (word: string) => string[];
    setOptions(options: Readonly<PartialTrieOptions>): Readonly<TrieOptions>;
    build(): TrieNodeTrie;
    getCursor(): BuilderCursor;
    /**
     * In this case, it isn't necessary. The TrieNodeBuilder doesn't need to know the characters
     * @param _characters
     */
    setCharacterSet(_characters: string | string[]): void;
    private createCursor;
    sortChildren(node: TrieNodeBranch): void;
    sortNodes(): void;
}
export declare function buildTrieNodeTrieFromWords(words: Iterable<string>): TrieNodeTrie;
export {};
//# sourceMappingURL=TrieNodeBuilder.d.ts.map