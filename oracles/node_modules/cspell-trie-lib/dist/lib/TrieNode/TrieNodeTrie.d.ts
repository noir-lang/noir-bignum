import type { ITrieNode, ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { PartialTrieOptions, TrieOptions } from '../trie.js';
import type { TrieData } from '../TrieData.js';
import type { TrieRoot } from './TrieNode.js';
export declare class TrieNodeTrie implements TrieData {
    readonly root: TrieRoot;
    private _iTrieRoot;
    readonly info: TrieOptions;
    private _size;
    readonly hasForbiddenWords: boolean;
    readonly hasCompoundWords: boolean;
    readonly hasNonStrictWords: boolean;
    constructor(root: TrieRoot);
    wordToCharacters: (word: string) => string[];
    get iTrieRoot(): ITrieNodeRoot;
    getRoot(): ITrieNodeRoot;
    getNode(prefix: string): ITrieNode | undefined;
    words(): Iterable<string>;
    has(word: string): boolean;
    isForbiddenWord(word: string): boolean;
    get size(): number;
    static createFromWords(words: Iterable<string>, options?: PartialTrieOptions): TrieNodeTrie;
    static createFromWordsAndConsolidate(words: Iterable<string>, options?: PartialTrieOptions): TrieNodeTrie;
}
//# sourceMappingURL=TrieNodeTrie.d.ts.map