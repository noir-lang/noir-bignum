import type { ITrieNodeRoot } from '../ITrieNode/ITrieNode.js';
import type { PartialTrieInfo } from '../ITrieNode/TrieInfo.js';
import type { YieldResult } from '../walker/walkerTypes.js';
import type { TrieNode, TrieRoot } from './TrieNode.js';
export declare function insert(word: string, root?: TrieNode): TrieNode;
export declare function isWordTerminationNode(node: TrieNode): boolean;
/**
 * Sorts the nodes in a trie in place.
 */
export declare function orderTrie(node: TrieNode): void;
/**
 * Generator an iterator that will walk the Trie parent then children in a depth first fashion that preserves sorted order.
 */
export declare function walk(node: TrieNode): Iterable<YieldResult>;
export declare const iterateTrie: typeof walk;
/**
 * Generate a Iterator that can walk a Trie and yield the words.
 */
export declare function iteratorTrieWords(node: TrieNode): Iterable<string>;
export declare function createTrieRoot(options: PartialTrieInfo): TrieRoot;
export declare function createTrieRootFromList(words: Iterable<string>, options?: PartialTrieInfo): TrieRoot;
export declare function createITrieFromList(words: Iterable<string>, options?: PartialTrieInfo): ITrieNodeRoot;
export declare function has(node: TrieNode, word: string): boolean;
export declare function findNode(node: TrieNode, word: string): TrieNode | undefined;
export declare function countNodes(root: TrieNode): number;
export declare function countWords(root: TrieNode): number;
interface CircularRef {
    stack: TrieNode[];
    word: string;
    pos: number;
}
interface CircularCheckTrue {
    isCircular: true;
    allSeen: boolean;
    ref: CircularRef;
}
interface CircularCheckFalse {
    isCircular: false;
    allSeen: boolean;
    ref?: CircularRef;
}
type CircularCheck = CircularCheckTrue | CircularCheckFalse;
export declare function checkCircular(root: TrieNode): CircularCheck;
export declare function isCircular(root: TrieNode): boolean;
export declare function trieNodeToRoot(node: TrieNode, options: PartialTrieInfo): TrieRoot;
export interface ValidateTrieResult {
    root: TrieNode;
    isValid: boolean;
    node?: TrieNode;
    error?: string;
}
export declare function validateTrie(root: TrieNode): ValidateTrieResult;
export {};
//# sourceMappingURL=trie-util.d.ts.map